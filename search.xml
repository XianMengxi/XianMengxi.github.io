<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>弹道方程以及代码实现</title>
      <link href="/2022/02/15/dan-dao-fang-cheng-yuan-li/"/>
      <url>/2022/02/15/dan-dao-fang-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="弹道方程以及代码实现"><a href="#弹道方程以及代码实现" class="headerlink" title="弹道方程以及代码实现"></a>弹道方程以及代码实现</h1><h2 id="什么是弹道方程？"><a href="#什么是弹道方程？" class="headerlink" title="什么是弹道方程？"></a>什么是弹道方程？</h2><p>弹道方程，就是使用数学模型来量化子弹在空气阻力作用下地运动轨迹。这听起来十分复杂，但其实际上其算法核心是依托于我们初中学过的斜抛运动</p><p><img src="/2022/02/15/dan-dao-fang-cheng-yuan-li/1.png" alt="弹道示意图"></p><p>现在，我们假设子弹从A点出发，需要击打C点，在重力加速度和空气阻力的作用下，我们不可能使子弹的初速度直接指向AC方向，而是使子弹的发射方向偏离AC方向$\beta$角度，这样才能确保子弹能以优美的弧线直接击打中C点。弹道方程的核心便是求解$\beta$角</p><h2 id="忽略空气阻力的弹道方程建模"><a href="#忽略空气阻力的弹道方程建模" class="headerlink" title="忽略空气阻力的弹道方程建模"></a>忽略空气阻力的弹道方程建模</h2><ol><li><p>首先对初速度V进行速度分解</p><p> $$<br> \begin{cases}<br>     v_x&#x3D;v\cos\alpha \<br>     v_y&#x3D;v\sin\alpha<br> \end{cases}<br> $$</p></li><li><p>由于水平上不受力的作用(忽略了空气阻力),故</p><ul><li><p>飞行时间 $t&#x3D;\frac{f}{v_x}&#x3D;\frac{f}{v\cos\alpha}$ (f为如图的水平距离)</p></li><li><p>子弹击打中的高度<br> $$<br>  h &#x3D; v_y t - \frac{1}{2} g t^2&#x3D;v \sin \alpha * \frac{f}{v \cos \alpha} - \frac{1}{2} g * (\frac{f}{v \cos \alpha})^2&#x3D;f \tan \alpha - \frac{1}{2} g * (\frac{f}{v \cos \alpha})^2<br> $$</p></li></ul></li><li><p>求解：先来分析已知条件以及目的参数，我们已经计算得到了C点相对于A点的位置，那么h和f已知，有重力加速度已知，目标是求解$\alpha$,这容易得到$\alpha$的解析式，下面利用高斯牛顿法迭代求解$\alpha$</p></li><li><p>高斯牛顿法求解方程</p><ul><li><p>首先构造残差函数</p><p>  $$<br>  \lvert\lvert e \rvert\rvert ^2 &#x3D; \lvert\lvert h_{actual}-h_{calc} \rvert\rvert ^2<br>  $$</p><p>  其中$ h_{actual} $ 为已知值， $ h_{calc} $ 是使用迭代法逐渐逼近的h值</p><p>  我们的目标是</p><p>  $$<br>  \min \lvert\lvert e \rvert\rvert ^2 &#x3D; \lvert\lvert h_{actual}-h_{calc} \rvert\rvert ^2 &#x3D; \lvert\lvert h_{actual} - f\tan\alpha+\frac{1}{2}g*(\frac{f}{v\cos\alpha})^2 \rvert\rvert ^2<br>  $$</p><p>  以此来达到使用计算机迭代逼近$ h_{actual} $的目的</p></li><li><p>对误差函数e进行泰勒展开，则：</p><p>  $$<br>  e(\theta + \Delta\theta)&#x3D;e(\theta)+\frac{\delta e}{\delta \theta}*d\theta<br>  $$</p></li><li><p>那么近似的误差函数可以写为(对内部进行泰勒展开并且将整个式子展开)</p><p>  $$<br>  \lvert\lvert e(\theta + \Delta\theta) \rvert\rvert ^2 &#x3D; e^2 + 2e \frac{\delta e}{\delta \theta} \Delta\theta + (\frac{\delta e}{\delta \theta} )^2 (\Delta \theta)^2<br>  $$</p></li><li><p>对于这个方程,$ e(\theta + \Delta\theta) $ 表示当e加上一个微小变量时e的变化幅度，当e最小时，有那么$ d e(\theta + \Delta\theta) &#x3D; 0 $ ,解得 </p><p>  $$<br>  \Delta \theta &#x3D; -\frac{e}{\frac{\delta e}{\delta\theta}}<br>  $$</p></li><li><p>$\Delta \theta$变化的方向是使误差函数趋于最小值的方向，那么</p><p>  $$<br>  \theta_{update}&#x3D; \theta + \Delta\theta<br>  $$</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> RoboMaster </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RoboMaster </tag>
            
            <tag> 算法 </tag>
            
            <tag> 辅瞄 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
